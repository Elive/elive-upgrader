#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-upgrader"
export TEXTDOMAIN

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"

exit_ok(){
    rm -f "$lockfile"
}
exit_error(){
    rm -f "$lockfile"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    el_error "$(basename $0) already running"
    exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}

main(){
    # pre {{{


    # FIXME: confs in /etc
    #news_history="$HOME/.config/$(basename $0)/news-history.txt"
    #if ! [[ -e "$news_history" ]] ; then
        #mkdir -p "$( dirname "$news_history" )"
    #fi

    # }}}
    # never run... checks {{{
    if grep -qs "boot=live" /proc/cmdline ; then
        exit
    fi

    # only run if first user
    if ! grep -qs "^first-user: $USER\$" /etc/elive-version ; then
        exit
    fi

    # TODO: disable in the future, new users could not have this enabled, or add them into the user-manager?
    if ! grep -qs "^%sudo.*NOPASSWD.*elive-upgrader-root" /etc/sudoers.d/privileges_upgrader || ! groups | grep -qs "sudo" ; then
        el_error "user is not in privileges_upgrader"
    fi

    # }}}
    # TODO:
    # - package changelog version based in isos (start value), important
    # - disable in live mode
    # - upgrade package first
    # - ask for upgrade desktop (will require to reboot and a initrd hook? for that we will need a daemon too)
    #   - nope, we have e17-conf that is always asked to upgrade when desktop starts
    # - migration hooks like in mkdeb
    # - notification system / ask if upgrade / changelog list
    #   - based on elive version iso
    #   - packages-list to install include with a diff or something
    # - E conf upgrader? (diff something)
    # - what if new packages / packages to remove? what if startup applications to add?
    # - lock unable to shutdown while upgrading, or terminal stuff


    for arg in "$@"
    do
        case "$arg" in
            --delayed)
                is_delayed=1
                shift
                ;;
        esac
    done

    if ((is_delayed)) ; then
        el_debug "delayed 20 seconds"
        sleep 20
    fi


    # update tool first (if)
    sudo elive-upgrader-root --update

    # get versions
    version_elive="$( cat "/etc/elive-version" | grep "elive-version:" | awk '{print $2}' )"
    version_upgrader="$( cat "/etc/elive-version" | grep "elive-fixes:" | awk '{print $2}' )"
    read -r version_elive <<< "$version_elive"
    read -r version_upgrader <<< "$version_upgrader"

    # we should always have the version updated or there's nothing to do here
    #if [[ -z "$version_upgrader" ]] || [[ -z "$version_elive" ]] ; then
        #exit
    #fi

    # TODO: run hooks, for root and for user, and save version used
    sudo elive-upgrader-root

    # we need our own version_upgrader version conf for the loop

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-upgrader"
export TEXTDOMAIN

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"

exit_ok(){
    rm -f "$lockfile"
}
exit_error(){
    rm -f "$lockfile"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    el_error "$(basename $0) already running"
    exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}

main(){
    # pre {{{
    local pong

    version_elive="$( cat "/etc/elive-version" | grep "elive-version:" | awk '{print $2}' )"
    read -r version_elive <<< "$version_elive"

    # distro version
    case "$( cat /etc/debian_version )" in
        10.*|"buster"*)
            is_buster=1
            hooks_d="/usr/lib/elive-upgrader/hooks-buster"
            ;;
        7.*|"wheezy"*)
            is_wheezy=1
            hooks_d="/usr/lib/elive-upgrader/hooks"
            ;;
        *)
            el_error "debian version unknown: $(cat /etc/debian_version)"
            # fallback:
            hooks_d="/usr/lib/elive-upgrader/hooks"
            ;;
    esac

    # FIXME: confs in /etc
    #news_history="$HOME/.config/$(basename $0)/news-history.txt"
    #if ! [[ -e "$news_history" ]] ; then
        #mkdir -p "$( dirname "$news_history" )"
    #fi

    # }}}
    # never run... checks {{{
    el_config_get

    # persistence upgrade {{{
    if grep -qs "boot=live" /proc/cmdline ; then

        # we are in persistence?
        if grep -qs "persistence" /proc/cmdline && [[ -s /tmp/.persistence-space-free-at-boot ]] ; then
            if [[ "$( cat /tmp/.persistence-space-free-at-boot | grep "[[:digit:]]" | tail -1 )" -gt "1200000" ]] ; then

                if [[ -z "$conf_use_upgrader_in_live" ]] ; then
                    if zenity --question --text="$( eval_gettext "Do you want to have automatic updates? This will feature updated packages in your Persistence saved sessions." )" ; then
                        conf_use_upgrader_in_live="yes"
                    else
                        conf_use_upgrader_in_live="no"
                    fi
                    el_config_save "conf_use_upgrader_in_live"
                else
                    if [[ "$conf_use_upgrader_in_live" = "no" ]] ; then
                        exit
                    fi
                fi
            else
                # not enough free space, dont use upgrader
                exit
            fi
        else
            # no persistence mode (only live mode), just exit
            exit
        fi
    fi
    # }}}

    # only run if first user
    if ! grep -qs "^first-user: $USER\$" /etc/elive-version ; then
        exit
    fi

    # just a check to make sure that it work
    pong="$( sudo -n elive-upgrader-root --ping )"
    if ! [[ "$pong" = "pong" ]] ; then
        el_error "user has no 'sudo elive-upgrader-root' privileges (without password)"
        exit 1
    fi

    # }}}

    # TODO:
    #   - packages-list to install include with a diff or something
    # - E conf upgrader? (diff something?)
    #     - we can run the enlightenment-remote too
    # - what if new packages / packages to remove? what if startup applications to add?
    #   - parse a list of packages to add, then a list of packages to remove, and in the end ... (what if conflicts? like adding a package that has a file added that was in another package first), we should do that interactively so that the user can say Yes or No in the install of packages for security reasons? (but we should have it already tested)
    # - lock unable to shutdown while upgrading, or terminal stuff
    #   - add a flag in /tmp/ and a daemon to check for that file and wait if stills open (and add a message to show/tell about that)
    # XXX sometimes we want to simply upgrade the system, how we should deal with this? running apug in a cron or something? searching for packages from the elive repo in order to update them from a list (because the elive repo is the important one to update), hum...


    for arg in "$@"
    do
        case "$arg" in
            --delayed)
                is_delayed=1
                shift
                ;;
            -u|--upgrade)
                sudo elive-upgrader-root --upgrade
                exit
                ;;
            -s|--simulate)
                # simulates the normal run / start from the daemon mode
                export EL_DEBUG=3
                export is_simulate=1
                true
                ;;
        esac
    done

    if ((is_delayed)) ; then
        el_debug "delayed 20 seconds"
        sleep 20
    fi

    # source functions
    source /usr/lib/elive-upgrader/functions.sh

    # update tool first (if)
    el_debug "going to: update-tool"
    sudo elive-upgrader-root --update-tool

    # hooks: root
    el_debug "going to: hooks root"
    sudo elive-upgrader-root --hooks-root

    # verify if enough time passed to check for upgrades and ask the user if upgrade the system
    el_debug "going to: upgrade full system (delayed, if enough time passed)"
    upgrade_system_delayed


    # always update before to run (if the package has been updated we want to fetch new code too)
    source /usr/lib/elive-upgrader/functions.sh

    # hooks: user
    el_debug "going to: hooks user"
    run_hooks "user"

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :



#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
el_make_environment
. gettext.sh
#TEXTDOMAIN="elive-upgrader"
#export TEXTDOMAIN

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"

exit_ok(){
    rm -f "$lockfile"
}
exit_error(){
    rm -f "$lockfile"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    el_error "$(basename $0) already running"
    exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}

main(){
    # pre {{{

    hooks_d="/usr/lib/elive-upgrader/hooks"

    # FIXME: confs in /etc
    #news_history="$HOME/.config/$(basename $0)/news-history.txt"
    #if ! [[ -e "$news_history" ]] ; then
        #mkdir -p "$( dirname "$news_history" )"
    #fi

    # }}}
    # never run... checks {{{
    if grep -qs "boot=live" /proc/cmdline ; then
        exit
    fi

    # only run if first user
    if ! grep -qs "^first-user: $USER\$" /etc/elive-version ; then
        exit
    fi

    # TODO: disable in the future, new users could not have this enabled, or add them into the user-manager?
    if ! grep -qs "^%sudo.*NOPASSWD.*elive-upgrader-root" /etc/sudoers.d/privileges_upgrader || ! groups | grep -qs "sudo" ; then
        el_error "user is not in privileges_upgrader"
    fi

    # }}}
    # TODO:
    #   - packages-list to install include with a diff or something
    # - E conf upgrader? (diff something?)
    #     - we can run the enlightenment-remote too
    # - what if new packages / packages to remove? what if startup applications to add?
    # - lock unable to shutdown while upgrading, or terminal stuff


    for arg in "$@"
    do
        case "$arg" in
            --delayed)
                is_delayed=1
                shift
                ;;
        esac
    done

    if ((is_delayed)) ; then
        el_debug "delayed 20 seconds"
        sleep 20
    fi


    # update tool first (if)
    sudo elive-upgrader-root --update

    # hooks: root
    sudo elive-upgrader-root

    # hooks: user
    # migration upgrade cases (auto hooks): {{{

    # get versions
    el_config_get "version_upgrader"
    if [[ -z "$version_upgrader" ]] ; then
        # reference to start from the version of elive built
        version_upgrader="$( cat "/etc/elive-version" | grep "elive-version:" | awk '{print $2}' )"
        read -r version_upgrader <<< "$version_upgrader"
        el_config_save "version_upgrader"
    fi

    version_last_hook="$( find "${hooks_d}" -mindepth 1 -maxdepth 1 -type d | sed -e 's|^.*/||g' | sort -n | tail -1 )"


    if LC_ALL=C dpkg --compare-versions "$version_last_hook" "gt" "$version_upgrader" ; then
        while read -ru 3 version
        do
            [[ -z "$version" ]] && continue

            if LC_ALL=C dpkg --compare-versions "$version" "gt" "$version_upgrader" ; then
                el_info "elive-upgrader: hook version: $version"

                while read -ru 3 file
                do
                    case "$file" in
                        *.sh)
                            # script
                            if [[ -x "$file" ]] && [[ "$file" = *".sh" ]] ; then
                                el_info "running script: $file"
                                if ! "$file" ; then
                                    el_error "failed ${file}: $( "$file" )"
                                fi
                            fi
                            ;;
                        *CHANGELOG.txt)
                            # changelog
                            if [[ -s "$file" ]] && [[ "$file" = *"/CHANGELOG.txt" ]] ; then
                                # update: user don't needs to see any version number here
                                #changelog="${changelog}\n\nVersion ${version}:\n$(cat "$file" )"
                                changelog="${changelog}\n\n$(cat "$file" )"
                            fi
                            ;;
                        *)
                            el_error "elive-upgrader: filetype unknown: $file"
                            ;;
                    esac
                done 3<<< "$( find "${hooks_d}/${version}/user" -mindepth 1 -maxdepth 1 -type f )"

                # update version, to know that we have run the hooks until here
                version_upgrader="$version"
                el_config_save "version_upgrader"
            fi
        done 3<<< "$( find "${hooks_d}" -mindepth 1 -maxdepth 1 -type d | sed -e 's|^.*/||g' | sort -n )"
    fi

    # changelog to show?
    if [[ -n "$changelog" ]] ; then
        local message_upgraded
        message_upgraded="$( printf "$( eval_gettext "Your Elive has been upgraded with:" )" "" )"

        echo -e "${message_upgraded}$changelog" | zenity --text-info --title="Elive System Updated"
        unset changelog
    fi


    # }}}
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :


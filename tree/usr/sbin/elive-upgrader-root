#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
source /usr/lib/elive-upgrader/functions.sh
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-upgrader"
export TEXTDOMAIN

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"
#set -x

exit_ok(){
    rm -f "$lockfile"

    #killall apt-get 2>/dev/null 1>&2 || true
    tmux kill-window -t Upgrade 2>/dev/null 1>&2 || true

    #while read -ru 3 line
    #do
        #[[ -z "$line" ]] && continue
        #kill "$line" 2>/dev/null 1>&2 || true
    #done 3<<< "$( ps ux | grep -v grep | grep -E "(bash.*apt-get|apt-get.*dist-upgrade)" )"
}
exit_error(){
    rm -f "$lockfile"

    #tmux kill-session -t elive-upgrader
    tmux kill-window -t Upgrade 2>/dev/null 1>&2 || true

    #killall apt-get 2>/dev/null 1>&2 || true

    #while read -ru 3 line
    #do
        #[[ -z "$line" ]] && continue
        #kill "$line" 2>/dev/null 1>&2 || true
    #done 3<<< "$( ps ux | grep -v grep | grep -E "(bash.*apt-get|apt-get.*dist-upgrade)" )"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    el_error "$(basename $0) already running"
    exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}

hooks_root(){
    # always update before to run (if the package has been updated we want to fetch new code too)
    source /usr/lib/elive-upgrader/functions.sh

    # hooks: root
    run_hooks "root"
}


updates_available_show(){
    local number
    # update
    if ! is_quiet=1 el_aptget_update ; then
        el_error "problem with el_aptget_update"
    fi

    number="$( LC_ALL="$EL_LC_EN" apt_get -u upgrade --assume-no --show-upgraded | grep -E "^[[:digit:]]+ upgraded," | tail -1 | awk '{print $1}' )"

    if [[ -n "$number" ]] && echo "$number" | grep -qs "^[[:digit:]]" ; then
        echo "$number"
        return 0
    else
        return 1
    fi
}

upgrade_system(){
    local is_upgraded
    if ! apt_get update -q=2 ; then
        # do not exit if fails, sometimes we have unworking repos but apt update works
        apt_get update -q=2
    fi

    # check
    if ! updates_available_show 1>/dev/null 2>&1 ; then
        el_info "$( eval_gettext "no updates available" )"
        return
    fi

    # test if we can run in a detached mode, so the user can close terminal without problems
    if [[ -x /usr/bin/tmux ]] && [[ -x /usr/bin/tmux-attach-jobs ]] ; then
        timeout 10 tmux-attach-jobs elive-upgrader stamp "touch '/tmp/.elive-upgrading'" 1>/dev/null
        sleep 1 ; sync
    fi

    # wait unlock
    apt_get check 1>/dev/null

    # run it, undetached or direct if we don't have tmux feature
    if [[ -e "/tmp/.elive-upgrading" ]] ; then
        rm -f "/tmp/.elive-upgrading" 1>/dev/null 2>&1 || true

        # IMPORTANT: do not use timeout, it will block apt-get
        tmux-attach-jobs elive-upgrader Upgrade "bash -c 'apt-get dist-upgrade ; echo ; echo ; echo -e \"Upgrade DONE\nYou can close the terminal now\" ; sleep 60 '" 1>/dev/null
        sleep 2 ; sync

        # visualize tasks if we have it already not opened
        if ! LC_ALL="$EL_LC_EN" ps ux | grep -v grep | grep -qs "rxvt.*tmux attach" ; then
            urxvt -e bash -c "unset TMUX ; tmux attach -t elive-upgrader"
            is_upgraded=1
        fi
    else
        urxvt -e bash -c "apt-get dist-upgrade ; echo ; echo ; echo -e \"Upgrade DONE\nYou can close the terminal\" ; sleep 60 " 1>/dev/null
        is_upgraded=1
    fi

    if ((is_upgraded)) ; then
        if zenity --question --text="$( eval_gettext "Your Elive has been upgraded with improvements and fixes. Do you want to donate to this amazing project in order to keep it progressing?" )" ; then
            web-launcher "http://www.elivecd.org/donate/?id=elive-upgrader-tool-fullupgrade"
        fi
    fi

    # remove flag
    rm -f "/tmp/.elive-upgrading" 1>/dev/null 2>&1 || true
}

update_upgrader(){
    if el_package_update_last_version -c "elive-upgrader" ; then
        # update packages lists
        if ! apt_get update -q=2 ; then
            apt_get update -q=2
        fi

        # wait unlock
        apt_get check 1>/dev/null

        # verify apt status
        if apt_get -y -f install -q=2 ; then
            if ! bash -c "unset TERM DISPLAY ; export DEBIAN_FRONTEND=noninteractive ; apt-get install -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confnew\" -q -y --force-yes elive-upgrader" ; then
                el_error "problem upgrading elive-upgrader: $(apt-get install -y elive-upgrader 2>&1 )"
                exit 1
            fi
        else
            # apt status is wrong, force manual update of elive-upgrader
            el_warning "problem with apt-get -y -f install: $(apt-get -y -f install 2>&1 ) : Trying to update elive-ugprader anyways with dpkg -x"

            apt_get clean
            apt_get update -q=2
            apt_get install -d -y elive-upgrader

            dpkg -i "$( find /var/cache/apt/archives/ -type f -iname elive-upgrader_'*'deb | sort -V | tail -1 )"
        fi

    else
        el_debug "no new version of elive-upgrader found"
    fi

    # check apt status no matter what
    if ! apt_get -y -f install -q=2 ; then
        apt_get clean
        apt_get update -q=2
        apt_get dist-upgrade -y --force-yes

        if ! apt_get -y -f install ; then
            zenity --error --text="$( eval_gettext "Seems like you have a broken state of your packages. Check our Elive Forums for a solution if you are unable to solve it yourself. Showing the result of the command:" ) apug"
            el_error "Problem with apt-get -y -f install (reported): $(apt-get -y -f install 2>&1 )"
            exit 1
        fi
    fi

    exit 0
}

main(){
    # pre {{{
    version_elive="$( cat "/etc/elive-version" | grep "elive-version:" | awk '{print $2}' )"
    read -r version_elive <<< "$version_elive"

    hooks_d="/usr/lib/elive-upgrader/hooks"

    # }}}
    # never run on live mode {{{
    # managed already from the main script
    #if grep -qs "boot=live" /proc/cmdline ; then
        #exit
    #fi

    # }}}


    for arg in "$@"
    do
        case "$arg" in
            #--delayed)
                #is_delayed=1
                #shift
                #;;
            --update|--update-tool)
                # TODO: delete the deprecated first paramter "--update" in the future
                update_upgrader
                ;;
            --hooks-root)
                hooks_root
                ;;
            --upgrade)
                upgrade_system
                ;;
            --updates-available)
                updates_available_show
                ;;
            --ping)
                echo "pong"
                exit
                ;;
        esac
    done

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-upgrader"
export TEXTDOMAIN

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"
#set -x

exit_ok(){
    rm -f "$lockfile"
}
exit_error(){
    rm -f "$lockfile"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    el_error "$(basename $0) already running"
    exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}

hooks_root(){
    # always update before to run (if the package has been updated we want to fetch new code too)
    source /usr/lib/elive-upgrader/functions.sh

    # hooks: root
    run_hooks "root"
}


updates_available_show(){
    local number
    # update
    if ! is_quiet=1 el_aptget_update ; then
        el_error "problem with el_aptget_update"
    fi

    number="$( LC_ALL="$EL_LC_EN" apt-get -u upgrade --assume-no --show-upgraded | grep -E "^[[:digit:]]+ upgraded," | tail -1 | awk '{print $1}' )"

    if [[ -n "$number" ]] && echo "$number" | grep -qs "^[[:digit:]]" ; then
        echo "$number"
        return 0
    else
        return 1
    fi
}

upgrade_system(){
    local is_upgraded
    if ! timeout 1200 apt-get update ; then
        if ! apt-get update ; then
            el_error "problem updating package lists: $(apt-get update 2>&1 )"
            exit 1
        fi
    fi

    # check
    if ! updates_available_show 1>/dev/null 2>&1 ; then
        el_info "$( eval_gettext "no updates available" )"
        return
    fi

    # test if we can run in a detached mode, so the user can close terminal without problems
    if [[ -x /usr/bin/tmux ]] && [[ -x /usr/bin/tmux-attach-jobs ]] ; then
        timeout 10 tmux-attach-jobs elive-upgrader stamp "touch '/tmp/.elive-upgrading'" 1>/dev/null
        sleep 1 ; sync
    fi
    # run it, undetached or direct if we don't have tmux feature
    if [[ -e "/tmp/.elive-upgrading" ]] ; then
        rm -f "/tmp/.elive-upgrading" 1>/dev/null 2>&1 || true

        tmux-attach-jobs elive-upgrader Upgrade "bash -c 'apt-get dist-upgrade ; echo ; echo ; echo \"Yepeee, new yummy Elive improvements around. You can close the terminal now\" ; sleep 60 '" 1>/dev/null
        sleep 2 ; sync

        # visualize tasks if we have it already not opened
        if ! LC_ALL="$EL_LC_EN" ps ux | grep -v grep | grep -qs "rxvt.*tmux attach" ; then
            urxvt -e bash -c "unset TMUX ; tmux attach -t elive-upgrader"
            is_upgraded=1
        fi
    else
        urxvt -e bash -c "apt-get dist-upgrade ; echo ; echo ; echo \"Yepeee, new yummy Elive improvements around. You can close the terminal\" ; sleep 60 " 1>/dev/null
        is_upgraded=1
    fi

    if ((is_upgraded)) ; then
        if zenity --question --text="$( eval_gettext "Your Elive has been upgraded with improvements and fixes, you don't need to reboot but is possible that you can see more changes if you do it. Do you want to donate to this amazing project in order to make it keep it progressing?" )" ; then
            web-launcher "http://www.elivecd.org/donate/?id=elive-upgrader-tool-fullupgrade"
        fi
    fi

    # remove flag
    rm -f "/tmp/.elive-upgrading" 1>/dev/null 2>&1 || true
}

update_upgrader(){
    if el_package_update_last_version -c "elive-upgrader" ; then
        if ! timeout 900 apt-get -f install ; then
            el_error "problem with apt-get -f install: $(apt-get -f install 2>&1 )"
            exit 1
        fi
        if ! timeout 1200 apt-get update ; then
            if ! apt-get update ; then
                el_error "problem updating package lists: $(apt-get update 2>&1 )"
                exit 1
            fi
        fi
        if ! timeout 1200 bash -c "unset TERM DISPLAY ; export DEBIAN_FRONTEND=noninteractive ; apt-get install -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confnew\" -q -y --force-yes elive-upgrader" ; then
            el_error "problem upgrading elive-upgrader: $(apt-get install -y elive-upgrader 2>&1 )"
            exit 1
        fi
    else
        el_debug "no new version of elive-upgrader found"
        exit 0
    fi

    exit 0
}

main(){
    # pre {{{
    version_elive="$( cat "/etc/elive-version" | grep "elive-version:" | awk '{print $2}' )"
    read -r version_elive <<< "$version_elive"

    hooks_d="/usr/lib/elive-upgrader/hooks"

    # }}}
    # never run on live mode {{{
    # managed already from the main script
    #if grep -qs "boot=live" /proc/cmdline ; then
        #exit
    #fi

    # }}}


    for arg in "$@"
    do
        case "$arg" in
            #--delayed)
                #is_delayed=1
                #shift
                #;;
            --update|--update-tool)
                # TODO: delete the deprecated first paramter "--update" in the future
                update_upgrader
                ;;
            --hooks-root)
                hooks_root
                ;;
            --upgrade)
                upgrade_system
                ;;
            --updates-available)
                updates_available_show
                ;;
        esac
    done

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :

#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
EL_REPORTS="1"
source /usr/lib/elive-upgrader/functions.sh
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-upgrader"
export TEXTDOMAIN

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"
#set -x

exit_ok(){
    rm -f "$lockfile"

    #killall apt-get 2>/dev/null 1>&2 || true
    tmux kill-window -t Upgrade 2>/dev/null 1>&2 || true

    #while read -ru 3 line
    #do
        #[[ -z "$line" ]] && continue
        #kill "$line" 2>/dev/null 1>&2 || true
    #done 3<<< "$( ps ux | grep -v grep | grep -E "(bash.*apt-get|apt-get.*dist-upgrade)" )"
}
exit_error(){
    rm -f "$lockfile"

    #tmux kill-session -t elive-upgrader
    tmux kill-window -t Upgrade 2>/dev/null 1>&2 || true

    #killall apt-get 2>/dev/null 1>&2 || true

    #while read -ru 3 line
    #do
        #[[ -z "$line" ]] && continue
        #kill "$line" 2>/dev/null 1>&2 || true
    #done 3<<< "$( ps ux | grep -v grep | grep -E "(bash.*apt-get|apt-get.*dist-upgrade)" )"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    NOREPORTS=1 el_error "$(basename $0) already running"
    exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 ERR

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}

# run fixes for apt in case we have lead to broken states
apt_fixes(){
    local is_failed
    # always update before to run (if the package has been updated we want to fetch new code too)
    source /usr/lib/elive-upgrader/functions.sh

    # wait unlock
    apt_get moo 1>/dev/null 2>&1

    if ! apt_get -y -f install -q=2 ; then
        sleep 20
        # check for good state
        apt_get check 1>/dev/null

        if ! apt_get -y -f install -q=2 ; then

            # try to reconfigure packages now
            if dpkg --configure -a ; then
                if ! apt_get -y -f instal -q=2 ; then
                    el_error "$(basename $0) in ${FUNCNAME} with apt-get -y -f install:\n$( DEBIAN_FRONTEND=noninteractive apt-get -y -f install 2>&1 )"
                    is_failed=1
                fi
            else
                el_error "$(basename $0) in ${FUNCNAME} with dpkg --configure -a:\n$( dpkg --configure -a  2>&1 )"
                is_failed=1
            fi
        fi
    fi

    if ((is_failed)) ; then
        local message_failed
        message_failed="$( printf "$( eval_gettext "It seems like you have a broken state of your packages. Please open a terminal and run the command '%s'. If you cannot solve the issue you can try to reinstall your Elive system, the installer features an upgrade mode that will keep all of your files and information." )" "apif" )"
        $guitool --error --text="$message_failed" 1>/dev/null 2>&1
    fi
}
hooks_root(){
    # always update before to run (if the package has been updated we want to fetch new code too)
    source /usr/lib/elive-upgrader/functions.sh

    # hooks: root
    run_hooks "root"
}


updates_available_show(){
    local number

    # wait unlock
    apt_get moo 1>/dev/null 2>&1

    # update
    if ! is_quiet=1 el_aptget_update 1>/dev/null 2>&1 ; then
        sleep 10
        if ! is_quiet=1 el_aptget_update ; then
            NOREPORTS=1 el_error "problem with el_aptget_update\n$( apt-get update 2>&1 )"
            return 1
        fi
    fi

    number="$( LC_ALL="$EL_LC_EN" TERM=linux DEBIAN_FRONTEND=noninteractive DEBIAN_PRIORITY=critical DEBCONF_NONINTERACTIVE_SEEN=true DEBCONF_NOWARNINGS=true apt-get -u upgrade --assume-no --show-upgraded | grep -E "^[[:digit:]]+ upgraded," | tail -1 | awk '{print $1}' )"

    if [[ -n "$number" ]] && echo "$number" | grep -qs "^[[:digit:]]" ; then
        echo "$number"
        return 0
    else
        return 1
    fi
}

upgrade_system(){
    local is_upgraded

    # wait unlock
    el_info "Updating APT lists..."
    apt_get moo 1>/dev/null 2>&1

    if ! ((is_update_ignored)) ; then
        if ! apt_get update -q=2 ; then
            apt_get check 1>/dev/null
            # do not exit if fails, sometimes we have unworking repos but apt update works
            apt_get update -q=2
        fi

        # check
        if ! [[ "$( updates_available_show )" -gt 0 ]] ; then
            el_info "$( eval_gettext "No updates available" )"
            return 0
        fi
    fi

    el_info "Upgrading system..."
    # test if we can run in a detached mode, so the user can close terminal without problems
    if [[ -x /usr/bin/tmux ]] && [[ -x /usr/bin/tmux-attach-jobs ]] ; then
        timeout 10 tmux-attach-jobs elive-upgrader stamp "touch '/tmp/.elive-upgrading'" 1>/dev/null
        sleep 1 ; sync
    fi

    # run it, undetached or direct if we don't have tmux feature
    if [[ -e "/tmp/.elive-upgrading" ]] ; then
        rm -f "/tmp/.elive-upgrading" 1>/dev/null 2>&1 || true

        # IMPORTANT: do not use timeout, it will block apt-get
        tmux-attach-jobs elive-upgrader Upgrade "bash -c 'export DEBIAN_FRONTEND=noninteractive ; apt-get dist-upgrade ; apt-get autoremove -y ; echo ; echo ; echo -e \"Upgrade DONE\nYou can close the terminal now\" ; sleep 60 '" 1>/dev/null
        sleep 1 ; sync

        # visualize tasks if we have it already not opened
        if ! LC_ALL="$EL_LC_EN" ps ux | grep -v grep | grep -qs "rxvt.*tmux attach" ; then
            urxvt -e bash -c "unset TMUX ; tmux attach -t elive-upgrader"
            is_upgraded=1
        fi
    else
        urxvt -e bash -c "export DEBIAN_FRONTEND=noninteractive ; apt-get dist-upgrade ; apt-get autoremove -y ; echo ; echo ; echo -e \"Upgrade DONE\nYou can close the terminal\" ; sleep 60 " 1>/dev/null
        is_upgraded=1
    fi

    if ((is_upgraded)) ; then
        if $guitool --question --text="$( eval_gettext "Your Elive has been upgraded with improvements and fixes! Do you want to donate to this amazing project in order to keep it progressing?" )" 1>/dev/null 2>&1 ; then
            web-launcher "https://www.elivecd.org/donate/?id=elive-upgrader-tool-fullupgrade"
        fi

        monthly_donations="$( monthly_earnings_patreon_get )"
        local message_donate_to_continue
        message_donate_to_continue="$( printf "$( eval_gettext "Your Elive has been upgraded with improvements and fixes. This month we have received so far %s USD. Would you like to contribute to this amazing project in order to keep it progressing?" )" "$monthly_donations" )"

        #if $guitool  --question --text="$( eval_gettext "Would you like to donate to this amazing project in order to keep making updates and fixes?" )" ; then
        if $guitool  --question --text="$message_donate_to_continue" 1>/dev/null 2>&1 ; then
            web-launcher "https://www.patreon.com/elive"
        fi

        el_info "Upgrade finished..."
    fi

    # remove flag
    rm -f "/tmp/.elive-upgrading" 1>/dev/null 2>&1 || true
}

# upgrade bios firmwares
upgrade_firmwares(){
    # pre {{{

    if el_check_dir_has_files "/sys/firmware/efi/" 1>/dev/null 2>&1 ; then
        if el_check_dir_has_files "/sys/firmware/efi/efivars" 1>/dev/null 2>&1 ; then
            is_efi_booted=1

            if [[ -x "$( which efivar )" ]] ; then
                if ! [[ "$( efivar -l 2>/dev/null | wc -l )" -ge 1 ]] ; then
                    unset is_efi_booted
                fi
            fi
        fi
    fi

    if ! el_dependencies_check "fwupdmgr" ; then
        el_info "fwupdmgr is not installed, ignoring firmware-upgrading features..."
        return 0
    fi

    # - pre }}}

    if ((is_efi_booted)) ; then
        # refresh packages lists:
        fwupdmgr refresh -y --force # 1>/dev/null  # requires 300 KB of internet

        # show updates:
        #fwupdmgr get-updates # 1>/dev/null

        # see if we have already answered to not update firmwares
        if [[ -n "$conf_firmwares_updates_available" ]] && ! ((is_force)) ; then
            updates_list="$( fwupdmgr get-updates -y --force | grep "^Update Version:" | sort -u | tr '\n' ' ' | sort -u )"

            # our updates available is the same as the one found when we answered to not update firmwares
            if [[ "${updates_list}" = "$conf_firmwares_updates_available" ]] ; then
                el_info "You selected to not upgrade firmwares the last time we asked you for this, for this number of updates, ignoring..."
                el_info "If you want to update firmwares, run the command: sudo $(basename $0) --upgrade-firmwares --force"
                return 0
            fi
        fi


        if LC_ALL="$EL_LC_EN" fwupdmgr get-updates -y --force | grep -qsE "(^Update Name:|New version:)" ; then

            el_info "Firmware updates found:\n$( fwupdmgr get-updates | grep "^Update Version:" | sed -e 's|^Update Version:||g' )"

            # notify
            $guitool --info --text="$( eval_gettext "Firmware updates have been found for your computer." )" 1>/dev/null 2>&1

            # display updates
            while read -ru 3 line
            do
                [[ -z "$line" ]] && continue
                case "$line" in
                    "Update Version:"*)
                        echo -e "\n\n${line}"
                        continue
                        ;;
                        "Update Name:"*)
                        echo "$line"
                        continue
                        ;;
                    "Update Description"*)
                        line="${line#Update Description:}"
                        read -r line <<< "$line"

                        echo -e "\n        ${line}"
                        ;;
                    "Update"*|"GUID:"*|"ID:"*)
                        continue
                        ;;
                    *)
                        echo "        $line"
                        ;;
                esac
            done 3<<< "$( LC_ALL="$EL_LC_EN" fwupdmgr get-updates -y --force )" | $guitool --height=400 --text-info --cancel-label="Done" --title="$( eval_gettext "Firmware updates available:" )" 1>/dev/null 2>&1


            # ask to install
            if $guitool --question --text="$( eval_gettext "Do you want to install firmware and BIOS updates for your computer?" )" 1>/dev/null 2>&1 ; then
                # ac power
                if ! LC_ALL=C acpi -a 2>/dev/null | grep -qs "on-line" && laptop-detect ; then
                    $guitool --warning --text="$( eval_gettext "Important: Your computer is not plugged. Connect it before continuing." )" 1>/dev/null 2>&1
                fi

                urxvt -e bash -c "COLUMNS=80 fwupdmgr -y update ; echo ; echo ; echo -e \"Upgrade DONE\nYou can close the terminal\" ; sleep 60 " 1>/dev/null
            else
                # we should remember the selection of "no"? the normal is that the user should always want to update firmware, but maybe not the first time and probably the second one, so do not remember this choice and instead, ask the question in every full upgrade request
                updates_list="$( fwupdmgr get-updates -y --force | grep "^Update Version:" | sort -u | tr '\n' ' ' | sort -u )"

                # remember them to not ask them again
                conf_firmwares_updates_available="$updates_list"
                el_config_save "conf_firmwares_updates_available"
            fi

        fi
    else
        el_info "Firmware upgrades requires UEFI, ignoring..."
    fi

}


# improved and much more reliable updater (will still works even if apt is broken or repos changed etc)
update_upgrader_fast(){
    if el_package_upgrade_fast 480 normal "elive-upgrader" ; then
        el_debug "TOOL UPDATED"
    fi

}
# old version, deprecated, less reliable, do not use it
#update_upgrader(){
    #if el_package_update_last_version -c "elive-upgrader" ; then
        ## update packages lists
        #if ! apt_get update -q=2 ; then
            #apt_get update -q=2
        #fi

        ## wait unlock
        #apt_get check 1>/dev/null

        ## verify apt status
        #if apt_get -y -f install -q=2 ; then
            #if ! bash -c "unset TERM DISPLAY ; export DEBIAN_FRONTEND=noninteractive ; apt-get install -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confnew\" -q -y --force-yes elive-upgrader" ; then
                #el_error "problem upgrading elive-upgrader: $(apt-get install -y elive-upgrader 2>&1 )"
                #exit 1
            #fi
        #else
            ## apt status is wrong, force manual update of elive-upgrader
            #el_warning "problem with apt-get -y -f install: $(apt-get -y -f install 2>&1 ) : Trying to update elive-ugprader anyways with dpkg -x"

            #apt_get clean
            #apt_get update -q=2
            #apt_get install -d -y elive-upgrader

            #dpkg -i "$( find /var/cache/apt/archives/ -type f -iname elive-upgrader_'*'deb | sort -V | tail -1 )"
        #fi

    #else
        #el_debug "no new version of elive-upgrader found"
    #fi

    ## check apt status no matter what
    #if ! apt_get -y -f install -q=2 ; then
        #apt_get clean
        #apt_get update -q=2
        #apt_get dist-upgrade -y --force-yes

        #if ! apt_get -y -f install ; then
            #$guitool --error --text="$( eval_gettext "Seems like you have a broken state of your packages. Check our Elive Forums for a solution if you are unable to solve it yourself. Showing the result of the command:" ) apug"
            #el_error "Problem with apt-get -y -f install (reported): $(apt-get -y -f install 2>&1 )"
            #exit 1
        #fi
    #fi

    #exit 0
#}

main(){
    # pre {{{
    version_elive="$( cat "/etc/elive-version" | grep "elive-version:" | awk '{print $2}' )"
    read -r version_elive <<< "$version_elive"

    hooks_d="/usr/lib/elive-upgrader/hooks"

    # }}}
    # never run on live mode {{{
    # managed already from the main script
    #if grep -qs "boot=live" /proc/cmdline ; then
        #exit
    #fi

    # }}}

    el_config_get

    # options
    for arg in "$@"
    do
        case "$arg" in
            --noupdate|--no-update)
                is_update_ignored=1
                ;;
            --ping)
                echo "pong"
                exit
                ;;
            --force)
                is_force=1
                ;;
            -h|--help)
                show_help
                exit 1
                ;;
        esac
    done

    for arg in "$@"
    do
        case "$arg" in
            #--delayed)
                #is_delayed=1
                #shift
                #;;
            --update|--update-tool)
                # TODO: delete the deprecated first paramter "--update" in the future
                #update_upgrader
                update_upgrader_fast
                ;;
            --hooks-root)
                hooks_root
                ;;
            --upgrade)
                upgrade_system
                ;;
            --updates-available)
                updates_available_show
                ;;
            --upgrade-firmwares|--upgrade-firmware)
                upgrade_firmwares
                ;;
            --fix)
                apt_fixes
                ;;
        esac
    done

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
